// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./pkg/domain/marker.go

package v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Marker interface
type MockMarker struct {
	ctrl     *gomock.Controller
	recorder *_MockMarkerRecorder
}

// Recorder for MockMarker (not exported)
type _MockMarkerRecorder struct {
	mock *MockMarker
}

func NewMockMarker(ctrl *gomock.Controller) *MockMarker {
	mock := &MockMarker{ctrl: ctrl}
	mock.recorder = &_MockMarkerRecorder{mock}
	return mock
}

func (_m *MockMarker) EXPECT() *_MockMarkerRecorder {
	return _m.recorder
}

func (_m *MockMarker) Mark(ctx context.Context, key string) error {
	ret := _m.ctrl.Call(_m, "Mark", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMarkerRecorder) Mark(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Mark", arg0, arg1)
}

func (_m *MockMarker) Unmark(ctx context.Context, key string) error {
	ret := _m.ctrl.Call(_m, "Unmark", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMarkerRecorder) Unmark(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unmark", arg0, arg1)
}
